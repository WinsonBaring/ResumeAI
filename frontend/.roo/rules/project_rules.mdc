---
description: This is how you should create components, create components in modular way
globs: 
alwaysApply: false
---
- when creating UI, always refer to the components directory, reuse components depending on its need, only create component if it has very specific needs and requires a lot of adjustments, but if a specific UI is needed create common components that can be later on reused, just make a reusable component if its common or needed to be like a button, card, etc.

- it should be responsive to any screen size
- instead of using the direct path use aliasing, like if you are coming from the page.tsx inside the app directory and you usually use "../../components/Card" to import Card from the card component, import it like this "@components/Card"


the project structure of this project
frontend/
├── components/           # Reusable components
│   ├── Button.tsx        # Button component
│   └── Card.tsx          # Card component
├── app/                  # Next.js app directory
│   ├── globals.css       # Global CSS and theme variables
│   ├── layout.tsx        # Root layout component
│   ├── page.tsx          # Root page component
│   ├── favicon.ico       # Favicon
│   └── landing-page/     # Landing page directory
│       └── page.tsx      # Landing page component
├── public/               # Static assets
│   ├── window.svg
│   ├── vercel.svg
│   ├── next.svg
│   ├── globe.svg
│   └── file.svg
├── .next/                # Next.js build output
├── node_modules/         # Dependencies
├── prisma/               # Prisma ORM files
├── .vercel/              # Vercel deployment files
├── package.json          # Project metadata and dependencies
├── package-lock.json     # Locked dependencies
├── tsconfig.json         # TypeScript configuration
├── next.config.ts        # Next.js configuration
├── next-env.d.ts         # Next.js TypeScript declarations
├── postcss.config.mjs    # PostCSS configuration
├── eslint.config.mjs     # ESLint configuration
├── middleware.ts         # Next.js middleware
├── .gitignore            # Git ignore file
├── .roomodes             # Roomodes configuration
├── .windsurfrules        # Windsurf rules
├── .taskmaster/          # Taskmaster files
├── .cursor/              # Cursor IDE files
├── .roo/                 # Roo files


└── README.md             # Project documentation